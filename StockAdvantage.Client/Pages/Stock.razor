@page "/Stock"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@rendermode InteractiveWebAssembly
@implements IAsyncDisposable

<h3>Stock Price Tracker</h3>

<p>Stock Symbol: @StockSymbol</p>
<p>Current Price: @StockPrice.ToString("F2")</p>

@if (IsConnected)
{
    <p style="color: green;">Connected to stock updates</p>
}
else
{
    <p style="color: red;">Disconnected from stock updates</p>

    <button @onclick="StartConnection">Reconnect</button>
}

@code {
    private string StockSymbol = "AAPL";
    private decimal StockPrice { get; set; }
    private HubConnection? hubConnection;
    private bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        await StartConnection();
    }

    private async Task StartConnection()
    {
        if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)
        {
            return; // Already connected
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/stockHub")) 
            .Build();

        // Listen for stock updates
        hubConnection.On<string, decimal>("ReceiveStockUpdate", (symbol, price) =>
        {
            StockSymbol = symbol;
            StockPrice = price;

            // Debugging: Log the received values to the console
            Console.WriteLine($"Received stock update: {StockSymbol} - {StockPrice}");

            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("SignalR connection established.");
            _ = StartStockUpdates(); // Start the stock update loop
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR: {ex.Message}");
        }
    }

    private async Task StartStockUpdates()
    {
        while (IsConnected)
        {
            await hubConnection.SendAsync("SendStockUpdate", StockSymbol);
            Console.WriteLine("Requesting stock update...");
            await Task.Delay(5000); 
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
            Console.WriteLine("SignalR connection disposed.");
        }
    }
}
